
-- 1. **Rank the customers based on the total amount they've spent on rentals.*

select concat(c.first_name,' ',c.last_name) as customer,sum(p.amount) as total_amount_spent,
rank() over(order by sum(p.amount) desc) from payment p
join customer c on p.customer_id=c.customer_id
join rental r on r.rental_id=p.rental_id
group by customer
order by total_amount_spent desc

-- 2. **Calculate the cumulative revenue generated by each film over time.**

select f.title as film, sum(p.amount) as revenue  from payment p
join rental r on r.rental_id=p.rental_id
join inventory i on i.inventory_id=r.rental_id
join film f on f.film_id=i.inventory_id
group by film
order by revenue desc

--3.**Determine the average rental duration for each film, considering films with similar lengths.**

select title as film,length, avg(rental_duration)over(partition by length) as average_duration from film 
order by length desc

--4.**Identify the top 3 films in each category based on their rental counts.**

select *  
from (select f.title as film,c.name as category,count(r.rental_id) as rental_count , 
row_number() over (partition by c.name order by count(r.rental_id) desc) as rownumber from rental r
join inventory i on i.inventory_id=r.inventory_id
join film f on f.film_id=i.film_id
join film_category fc on f.film_id=fc.film_id
join category c on c.category_id=fc.category_id
group by c.name,f.title
order by category,rownumber) b
where rownumber<=3


--5.**Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**

select customer_id,count(rental_id)- 
(select avg(total_customer_count) as average_count from 
(select customer_id,count(rental_id) as total_customer_count from rental r 
group by customer_id) b) as diference_rental_avg from rental 
group by customer_id


--6. **Find the monthly revenue trend for the entire rental store over time.*

select case (month(payment_date)as month) when 1 then 'JAN' , WHEN 2 THEN 'FEB', WHEN 3 THEN 'MAR' 
,sum(amount) as total_revenue from payment 
group by month

--7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
with CTE AS  
(select concat(c.first_name,' ',c.last_name) as name, sum(amount) as spending ,rank() over (order by sum(amount) desc) as customer_rank 
from payment p 
join customer c on c.customer_id=p.customer_id 
group by name)
SELECT * FROM CTE WHERE CUSTOMER_RANK <= (SELECT 0.2 * count(NAME) FROM CTE)  

--8.**Calculate the running total of rentals per category, ordered by rental count.**

SELECT B.NAME,B.FILM_ID,B.COUNT, SUM(COUNT)OVER (ORDER BY B.NAME,B.FILM_ID) AS RUNNING_TOTAL   FROM  (SELECT DISTINCT C.NAME,FC.FILM_ID,
 COUNT(RENTAL_ID)OVER(PARTITION BY FC.FILM_ID,C.NAME) AS COUNT FROM  RENTAL R
JOIN INVENTORY I ON I.INVENTORY_ID=R.INVENTORY_ID
JOIN FILM_CATEGORY FC ON FC.FILM_ID=I.FILM_ID
join CATEGORY C ON C.CATEGORY_ID=FC.CATEGORY_ID
order by C.NAME,FC.FILM_ID
) B

--9. Find the films that have been rented less than the average rental count for their respective categories.

select b.name , avg(b.count) from (select c.name ,f.title,count(r.rental_id) as count from rental r 
join inventory i on i.inventory_id=r.inventory_id
join film f on i.film_id=f.film_id
join film_category fc on fc.film_id=f.film_id
join category c on c.category_id=fc.category_id
group by c.name,f.title)b
group by b.name

--10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

select month(payment_date) as month, sum(amount) as revenue from payment  
group by month
order by revenue desc
limit 5

